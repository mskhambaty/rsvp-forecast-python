{
  "openapi": "3.1.0",
  "info": {
    "title": "RSVP Forecast API - Model Info",
    "version": "1.0.0",
    "description": "Get model information and constraints for RSVP prediction"
  },
  "servers": [
    {
      "url": "https://rsvp-forecast-python.onrender.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/model_info": {
      "get": {
        "summary": "Get Model Information",
        "description": "Returns available parameters, constraints, and input schema for the RSVP prediction model. Use this to understand what values are valid for predictions.",
        "operationId": "getModelInfo",
        "responses": {
          "200": {
            "description": "Model information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "available_temperatures": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "description": "List of available temperatures from training data (Fahrenheit)",
                      "example": [28, 29, 34, 35, 36, 39, 40, 41, 43, 44, 45, 46, 47, 49, 52, 56, 57, 58, 61, 66, 67, 75, 77, 78, 83]
                    },
                    "temperature_range": {
                      "type": "object",
                      "properties": {
                        "min": {
                          "type": "integer",
                          "description": "Minimum temperature in training data"
                        },
                        "max": {
                          "type": "integer", 
                          "description": "Maximum temperature in training data"
                        }
                      },
                      "example": {"min": 28, "max": 83}
                    },
                    "available_events": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of event names from training data",
                      "example": ["Eid-e-Gadheer-e-Khum", "Sherullah Raat - 3/1", "Milad Mubarak of Syedna Taher Saifuddin RA Niyaz"]
                    },
                    "weather_types": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Supported weather types (case-insensitive)",
                      "example": ["Clear", "Rain", "Rainy"]
                    },
                    "date_format": {
                      "type": "string",
                      "description": "Required date format for predictions",
                      "example": "YYYY-MM-DD"
                    },
                    "input_schema": {
                      "type": "object",
                      "description": "Schema for prediction inputs",
                      "properties": {
                        "event_date": {
                          "type": "string",
                          "description": "Event date in YYYY-MM-DD format"
                        },
                        "registered_count": {
                          "type": "string", 
                          "description": "Number of people registered (integer)"
                        },
                        "weather_temperature": {
                          "type": "string",
                          "description": "Temperature in Fahrenheit (will find nearest available)"
                        },
                        "weather_type": {
                          "type": "string",
                          "description": "Weather condition (Clear, Rain, Rainy - case insensitive)"
                        },
                        "special_event": {
                          "type": "string",
                          "description": "Whether it's a special event (boolean)"
                        },
                        "event_name": {
                          "type": "string",
                          "description": "Name of the event (unknown names handled gracefully)"
                        },
                        "sunset_time": {
                          "type": "string",
                          "description": "Sunset time in HH:MM format (24-hour)"
                        }
                      }
                    },
                    "notes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Important notes about API behavior",
                      "example": [
                        "Temperature will be rounded to nearest available value from training data",
                        "Unknown event names are handled gracefully using other features", 
                        "Weather type is case-insensitive and accepts Rain/Rainy variations"
                      ]
                    }
                  },
                  "required": ["available_temperatures", "temperature_range", "available_events", "weather_types", "date_format", "input_schema", "notes"]
                }
              }
            }
          },
          "500": {
            "description": "Model not loaded or error retrieving model information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string",
                      "example": "Model not loaded"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["Model Information"]
      }
    }
  },
  "components": {
    "schemas": {}
  },
  "tags": [
    {
      "name": "Model Information",
      "description": "Endpoints for getting model metadata and constraints"
    }
  ]
}
